{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","imgSrc","concat","this","props","id","slice","react_default","a","createElement","className","name","src","alt","type","exp","Component","Pokedex","title","isWinner","pokemon","map","p","src_Pokecard_0","base_experience","Pokegame","hand1","hand2","Object","toConsumableArray","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","src_Pokedex_0","defaultProps","App","src_Pokegame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f26b286.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Pokecard.css\";\r\n\r\n//const POKE_API = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\"\r\nconst POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n\r\nlet padToThree = number => (number <= 999 ? `00${number}`.slice(-3) : number);\r\n\r\nclass Pokecard extends Component {\r\n    render() {\r\n        let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\r\n        return (\r\n            <div className=\"Pokecard\">\r\n                <h1 className=\"Pokecard-title\">{this.props.name}</h1>\r\n                <div className=\"Pokecard-image\">\r\n                    <img src={imgSrc} alt={this.props.name} />\r\n                </div>\r\n                <div className=\"Pokecard-data\">Type: {this.props.type}</div>\r\n                <div className=\"Pokecard-data\">EXP: {this.props.exp}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokecard;\r\n","import React, { Component } from \"react\";\r\nimport Pokecard from \"./Pokecard\";\r\nimport \"./Pokedex.css\";\r\n\r\nclass Pokedex extends Component {\r\n    render() {\r\n        let title;\r\n        if (this.props.isWinner) {\r\n            title = <h1 className=\"Pokedex-winner\">Winning Hand</h1>;\r\n        } else {\r\n            title = <h1 className=\"Pokedex-loserr\">Losing Hand</h1>;\r\n        }\r\n        return (\r\n            <div className=\"Pokedex\">\r\n                {title};<h4>Total Experience: {this.props.exp}</h4>\r\n                <div className=\"Pokedex-cards\">\r\n                    {this.props.pokemon.map(p => (\r\n                        <Pokecard\r\n                            id={p.id}\r\n                            name={p.name}\r\n                            type={p.type}\r\n                            exp={p.base_experience}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokedex;\r\n","import React, { Component } from \"react\";\r\nimport Pokedex from \"./Pokedex\";\r\n\r\nclass Pokegame extends Component {\r\n    static defaultProps = {\r\n        pokemon: [\r\n            { id: 4, name: \"Charmander\", type: \"fire\", base_experience: 62 },\r\n            { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\r\n            { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\r\n            {\r\n                id: 12,\r\n                name: \"Butterfree\",\r\n                type: \"flying\",\r\n                base_experience: 178\r\n            },\r\n            { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\r\n            { id: 39, name: \"Jigglypuff\", type: \"normal\", base_experience: 95 },\r\n            { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\r\n            { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 }\r\n        ]\r\n    };\r\n    render() {\r\n        let hand1 = [];\r\n        let hand2 = [...this.props.pokemon];\r\n\r\n        // Randomely deal both hands\r\n        while (hand1.length < hand2.length) {\r\n            let randIdx = Math.floor(Math.random() * hand2.length);\r\n            // slices off 1 pokemon as an array then we access the 1 element with [0]\r\n            let randPokemon = hand2.splice(randIdx, 1)[0];\r\n            hand1.push(randPokemon);\r\n        }\r\n\r\n        //adds all the experience vs\r\n        let exp1 = hand1.reduce(\r\n            (exp, pokemon) => exp + pokemon.base_experience,\r\n            0\r\n        );\r\n        let exp2 = hand2.reduce(\r\n            (exp, pokemon) => exp + pokemon.base_experience,\r\n            0\r\n        );\r\n        return (\r\n            <div>\r\n                <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\r\n                <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokegame;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Pokegame from \"./Pokegame\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Pokegame />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}